{"version":3,"sources":["../../../../projects/uiowa/digit-only/src/lib/digit-only.directive.ts","../../../../projects/uiowa/digit-only/src/lib/mask.directive.ts","../../../../projects/uiowa/digit-only/src/lib/digit-only.module.ts"],"names":["DigitOnlyDirective","el","this","hasDecimalPoint","navigationKeys","decimal","decimalSeparator","min","Infinity","max","inputElement","nativeElement","prototype","ngOnChanges","changes","pattern","regex","RegExp","maybeMin","Number","isNaN","maybeMax","onKeyDown","e","indexOf","key","ctrlKey","metaKey","newValue","forecastValue","split","length","preventDefault","test","newNumber","onPaste","event","pastedInput","window","getData","clipboardData","pasteData","onDrop","textData","dataTransfer","focus","pastedContent","sanitizedContent","sanitizeInput","document","execCommand","setRangeText","_a","start","selectionStart","end","selectionEnd","insertAtCursor","value","myField","myValue","startPos","endPos","substring","pos","setSelectionRange","triggerEvent","type","createEvent","initEvent","dispatchEvent","input","result","isValidDecimal","replace","maxLength","allowedLength","string","selectedText","getSelection","oldValue","selection","Directive","args","selector","ElementRef","Input","HostListener","MaskDirective","NgModule","imports","declarations","exports"],"mappings":"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","sourcesContent":["import {\r\n  Directive,\r\n  ElementRef,\r\n  HostListener,\r\n  Input,\r\n  OnChanges,\r\n  SimpleChanges,\r\n} from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[digitOnly]',\r\n})\r\nexport class DigitOnlyDirective implements OnChanges {\r\n  private hasDecimalPoint = false;\r\n  private navigationKeys = [\r\n    'Backspace',\r\n    'Delete',\r\n    'Tab',\r\n    'Escape',\r\n    'Enter',\r\n    'Home',\r\n    'End',\r\n    'ArrowLeft',\r\n    'ArrowRight',\r\n    'Clear',\r\n    'Copy',\r\n    'Paste',\r\n  ];\r\n\r\n  @Input() decimal = false;\r\n  @Input() decimalSeparator = '.';\r\n  @Input() min = -Infinity;\r\n  @Input() max = Infinity;\r\n  @Input() pattern?: string | RegExp;\r\n  private regex: RegExp;\r\n  inputElement: HTMLInputElement;\r\n\r\n  constructor(public el: ElementRef) {\r\n    this.inputElement = el.nativeElement;\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes.pattern) {\r\n      this.regex = this.pattern ? RegExp(this.pattern) : null;\r\n    }\r\n\r\n    if (changes.min) {\r\n      const maybeMin = Number(this.min);\r\n      this.min = isNaN(maybeMin) ? -Infinity : maybeMin;\r\n    }\r\n\r\n    if (changes.max) {\r\n      const maybeMax = Number(this.max);\r\n      this.max = isNaN(maybeMax) ? Infinity : maybeMax;\r\n    }\r\n  }\r\n\r\n  @HostListener('keydown', ['$event'])\r\n  onKeyDown(e: KeyboardEvent): any {\r\n    if (\r\n      this.navigationKeys.indexOf(e.key) > -1 || // Allow: navigation keys: backspace, delete, arrows etc.\r\n      (e.key === 'a' && e.ctrlKey === true) || // Allow: Ctrl+A\r\n      (e.key === 'c' && e.ctrlKey === true) || // Allow: Ctrl+C\r\n      (e.key === 'v' && e.ctrlKey === true) || // Allow: Ctrl+V\r\n      (e.key === 'x' && e.ctrlKey === true) || // Allow: Ctrl+X\r\n      (e.key === 'a' && e.metaKey === true) || // Allow: Cmd+A (Mac)\r\n      (e.key === 'c' && e.metaKey === true) || // Allow: Cmd+C (Mac)\r\n      (e.key === 'v' && e.metaKey === true) || // Allow: Cmd+V (Mac)\r\n      (e.key === 'x' && e.metaKey === true) // Allow: Cmd+X (Mac)\r\n    ) {\r\n      // let it happen, don't do anything\r\n      return;\r\n    }\r\n\r\n    let newValue = '';\r\n\r\n    if (this.decimal && e.key === this.decimalSeparator) {\r\n      newValue = this.forecastValue(e.key);\r\n      if (newValue.split(this.decimalSeparator).length > 2) { // has two or more decimal points\r\n        e.preventDefault();\r\n        return;\r\n      } else {\r\n        this.hasDecimalPoint = newValue.indexOf(this.decimalSeparator) > -1;\r\n        return; // Allow: only one decimal point\r\n      }\r\n    }\r\n\r\n    // Ensure that it is a number and stop the keypress\r\n    if (e.key === ' ' || isNaN(Number(e.key))) {\r\n      e.preventDefault();\r\n      return;\r\n    }\r\n\r\n    newValue = newValue || this.forecastValue(e.key);\r\n    // check the input pattern RegExp\r\n    if (this.regex) {\r\n      if (!this.regex.test(newValue)) {\r\n        e.preventDefault();\r\n        return;\r\n      }\r\n    }\r\n\r\n    const newNumber = Number(newValue);\r\n    if (newNumber > this.max || newNumber < this.min) {\r\n      e.preventDefault();\r\n    }\r\n  }\r\n\r\n  @HostListener('paste', ['$event'])\r\n  onPaste(event: any): void {\r\n    let pastedInput: string;\r\n    if (window['clipboardData']) {\r\n      // Browser is IE\r\n      pastedInput = window['clipboardData'].getData('text');\r\n    } else if (event.clipboardData && event.clipboardData.getData) {\r\n      // Other browsers\r\n      pastedInput = event.clipboardData.getData('text/plain');\r\n    }\r\n\r\n    this.pasteData(pastedInput);\r\n    event.preventDefault();\r\n  }\r\n\r\n  @HostListener('drop', ['$event'])\r\n  onDrop(event: DragEvent): void {\r\n    const textData = event.dataTransfer.getData('text');\r\n    this.inputElement.focus();\r\n    this.pasteData(textData);\r\n    event.preventDefault();\r\n  }\r\n\r\n  private pasteData(pastedContent: string): void {\r\n    const sanitizedContent = this.sanitizeInput(pastedContent);\r\n    const pasted = document.execCommand('insertText', false, sanitizedContent);\r\n    if (!pasted) {\r\n      if (this.inputElement.setRangeText) {\r\n        const { selectionStart: start, selectionEnd: end } = this.inputElement;\r\n        this.inputElement.setRangeText(sanitizedContent, start, end, 'end');\r\n      } else {\r\n        // Browser does not support setRangeText, e.g. IE\r\n        this.insertAtCursor(this.inputElement, sanitizedContent);\r\n      }\r\n    }\r\n    if (this.decimal) {\r\n      this.hasDecimalPoint =\r\n        this.inputElement.value.indexOf(this.decimalSeparator) > -1;\r\n    }\r\n  }\r\n\r\n  // The following 2 methods were added from the below article for browsers that do not support setRangeText\r\n  // https://stackoverflow.com/questions/11076975/how-to-insert-text-into-the-textarea-at-the-current-cursor-position\r\n  private insertAtCursor(myField: HTMLInputElement, myValue: string): void {\r\n    const startPos = myField.selectionStart;\r\n    const endPos = myField.selectionEnd;\r\n\r\n    myField.value =\r\n      myField.value.substring(0, startPos) +\r\n      myValue +\r\n      myField.value.substring(endPos, myField.value.length);\r\n\r\n    const pos = startPos + myValue.length;\r\n    myField.focus();\r\n    myField.setSelectionRange(pos, pos);\r\n\r\n    this.triggerEvent(myField, 'input');\r\n  }\r\n\r\n  private triggerEvent(el: HTMLInputElement, type: string): void {\r\n    if ('createEvent' in document) {\r\n      // modern browsers, IE9+\r\n      const e = document.createEvent('HTMLEvents');\r\n      e.initEvent(type, false, true);\r\n      el.dispatchEvent(e);\r\n    }\r\n  }\r\n  // end stack overflow code\r\n\r\n  private sanitizeInput(input: string): string {\r\n    let result = '';\r\n    if (this.decimal && this.isValidDecimal(input)) {\r\n      const regex = new RegExp(`[^0-9${this.decimalSeparator}]`, 'g');\r\n      result = input.replace(regex, '');\r\n    } else {\r\n      result = input.replace(/[^0-9]/g, '');\r\n    }\r\n\r\n    const maxLength = this.inputElement.maxLength;\r\n    if (maxLength > 0) {\r\n      // the input element has maxLength limit\r\n      const allowedLength = maxLength - this.inputElement.value.length;\r\n      result = allowedLength > 0 ? result.substring(0, allowedLength) : '';\r\n    }\r\n    return result;\r\n  }\r\n\r\n  private isValidDecimal(string: string): boolean {\r\n    if (!this.hasDecimalPoint) {\r\n      return string.split(this.decimalSeparator).length <= 2;\r\n    } else {\r\n      // the input element already has a decimal separator\r\n      const selectedText = this.getSelection();\r\n      if (selectedText && selectedText.indexOf(this.decimalSeparator) > -1) {\r\n        return string.split(this.decimalSeparator).length <= 2;\r\n      } else {\r\n        return string.indexOf(this.decimalSeparator) < 0;\r\n      }\r\n    }\r\n  }\r\n\r\n  private getSelection(): string {\r\n    return this.inputElement.value.substring(\r\n      this.inputElement.selectionStart,\r\n      this.inputElement.selectionEnd\r\n    );\r\n  }\r\n\r\n  private forecastValue(key: string): string {\r\n    const selectionStart = this.inputElement.selectionStart;\r\n    const selectionEnd = this.inputElement.selectionEnd;\r\n    const oldValue = this.inputElement.value;\r\n    const selection = oldValue.substring(selectionStart, selectionEnd);\r\n    return selection\r\n      ? oldValue.replace(selection, key)\r\n      : oldValue.substring(0, selectionStart) +\r\n          key +\r\n          oldValue.substring(selectionStart);\r\n  }\r\n}\r\n","import { Directive, ElementRef, HostListener } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[mask]',\r\n})\r\nexport class MaskDirective {\r\n  private navigationKeys = [\r\n    'Backspace',\r\n    'Delete',\r\n    'Tab',\r\n    'Escape',\r\n    'Enter',\r\n    'Home',\r\n    'End',\r\n    'ArrowLeft',\r\n    'ArrowRight',\r\n    'Clear',\r\n    'Copy',\r\n    'Paste',\r\n  ];\r\n  inputElement: HTMLInputElement;\r\n  regex: RegExp;\r\n\r\n  constructor(public el: ElementRef) {\r\n    this.inputElement = el.nativeElement;\r\n    this.regex = new RegExp(this.inputElement.pattern);\r\n  }\r\n\r\n  @HostListener('keydown', ['$event'])\r\n  onKeyDown(e: KeyboardEvent) {\r\n    if (\r\n      this.navigationKeys.indexOf(e.key) > -1 || // Allow: navigation keys: backspace, delete, arrows etc.\r\n      (e.key === 'a' && e.ctrlKey === true) || // Allow: Ctrl+A\r\n      (e.key === 'c' && e.ctrlKey === true) || // Allow: Ctrl+C\r\n      (e.key === 'v' && e.ctrlKey === true) || // Allow: Ctrl+V\r\n      (e.key === 'x' && e.ctrlKey === true) || // Allow: Ctrl+X\r\n      (e.key === 'a' && e.metaKey === true) || // Allow: Cmd+A (Mac)\r\n      (e.key === 'c' && e.metaKey === true) || // Allow: Cmd+C (Mac)\r\n      (e.key === 'v' && e.metaKey === true) || // Allow: Cmd+V (Mac)\r\n      (e.key === 'x' && e.metaKey === true) // Allow: Cmd+X (Mac)\r\n    ) {\r\n      // let it happen, don't do anything\r\n      return;\r\n    }\r\n\r\n    const newValue = this.forecastValue(e.key);\r\n    if (!this.regex.test(newValue)) {\r\n      e.preventDefault();\r\n    }\r\n  }\r\n\r\n  private forecastValue(key: string): string {\r\n    const selectionStart = this.inputElement.selectionStart;\r\n    const selectionEnd = this.inputElement.selectionEnd;\r\n    const oldValue = this.inputElement.value;\r\n    const selection = oldValue.substring(selectionStart, selectionEnd);\r\n    return selection\r\n      ? oldValue.replace(selection, key)\r\n      : oldValue.substring(0, selectionStart) +\r\n          key +\r\n          oldValue.substring(selectionStart);\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { DigitOnlyDirective } from './digit-only.directive';\r\nimport { MaskDirective } from './mask.directive';\r\n\r\n@NgModule({\r\n  imports: [],\r\n  declarations: [DigitOnlyDirective, MaskDirective],\r\n  exports: [DigitOnlyDirective, MaskDirective],\r\n})\r\nexport class DigitOnlyModule {}\r\n"]}