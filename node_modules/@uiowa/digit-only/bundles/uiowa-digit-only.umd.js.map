{"version":3,"file":"uiowa-digit-only.umd.js","sources":["../../../../projects/uiowa/digit-only/src/lib/digit-only.directive.ts","../../../../projects/uiowa/digit-only/src/lib/mask.directive.ts","../../../../projects/uiowa/digit-only/src/lib/digit-only.module.ts","../../../../projects/uiowa/digit-only/src/public-api.ts","../../../../projects/uiowa/digit-only/src/uiowa-digit-only.ts"],"sourcesContent":["import {\r\n  Directive,\r\n  ElementRef,\r\n  HostListener,\r\n  Input,\r\n  OnChanges,\r\n  SimpleChanges,\r\n} from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[digitOnly]',\r\n})\r\nexport class DigitOnlyDirective implements OnChanges {\r\n  private hasDecimalPoint = false;\r\n  private navigationKeys = [\r\n    'Backspace',\r\n    'Delete',\r\n    'Tab',\r\n    'Escape',\r\n    'Enter',\r\n    'Home',\r\n    'End',\r\n    'ArrowLeft',\r\n    'ArrowRight',\r\n    'Clear',\r\n    'Copy',\r\n    'Paste',\r\n  ];\r\n\r\n  @Input() decimal = false;\r\n  @Input() decimalSeparator = '.';\r\n  @Input() min = -Infinity;\r\n  @Input() max = Infinity;\r\n  @Input() pattern?: string | RegExp;\r\n  private regex: RegExp;\r\n  inputElement: HTMLInputElement;\r\n\r\n  constructor(public el: ElementRef) {\r\n    this.inputElement = el.nativeElement;\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes.pattern) {\r\n      this.regex = this.pattern ? RegExp(this.pattern) : null;\r\n    }\r\n\r\n    if (changes.min) {\r\n      const maybeMin = Number(this.min);\r\n      this.min = isNaN(maybeMin) ? -Infinity : maybeMin;\r\n    }\r\n\r\n    if (changes.max) {\r\n      const maybeMax = Number(this.max);\r\n      this.max = isNaN(maybeMax) ? Infinity : maybeMax;\r\n    }\r\n  }\r\n\r\n  @HostListener('keydown', ['$event'])\r\n  onKeyDown(e: KeyboardEvent): any {\r\n    if (\r\n      this.navigationKeys.indexOf(e.key) > -1 || // Allow: navigation keys: backspace, delete, arrows etc.\r\n      (e.key === 'a' && e.ctrlKey === true) || // Allow: Ctrl+A\r\n      (e.key === 'c' && e.ctrlKey === true) || // Allow: Ctrl+C\r\n      (e.key === 'v' && e.ctrlKey === true) || // Allow: Ctrl+V\r\n      (e.key === 'x' && e.ctrlKey === true) || // Allow: Ctrl+X\r\n      (e.key === 'a' && e.metaKey === true) || // Allow: Cmd+A (Mac)\r\n      (e.key === 'c' && e.metaKey === true) || // Allow: Cmd+C (Mac)\r\n      (e.key === 'v' && e.metaKey === true) || // Allow: Cmd+V (Mac)\r\n      (e.key === 'x' && e.metaKey === true) // Allow: Cmd+X (Mac)\r\n    ) {\r\n      // let it happen, don't do anything\r\n      return;\r\n    }\r\n\r\n    let newValue = '';\r\n\r\n    if (this.decimal && e.key === this.decimalSeparator) {\r\n      newValue = this.forecastValue(e.key);\r\n      if (newValue.split(this.decimalSeparator).length > 2) { // has two or more decimal points\r\n        e.preventDefault();\r\n        return;\r\n      } else {\r\n        this.hasDecimalPoint = newValue.indexOf(this.decimalSeparator) > -1;\r\n        return; // Allow: only one decimal point\r\n      }\r\n    }\r\n\r\n    // Ensure that it is a number and stop the keypress\r\n    if (e.key === ' ' || isNaN(Number(e.key))) {\r\n      e.preventDefault();\r\n      return;\r\n    }\r\n\r\n    newValue = newValue || this.forecastValue(e.key);\r\n    // check the input pattern RegExp\r\n    if (this.regex) {\r\n      if (!this.regex.test(newValue)) {\r\n        e.preventDefault();\r\n        return;\r\n      }\r\n    }\r\n\r\n    const newNumber = Number(newValue);\r\n    if (newNumber > this.max || newNumber < this.min) {\r\n      e.preventDefault();\r\n    }\r\n  }\r\n\r\n  @HostListener('paste', ['$event'])\r\n  onPaste(event: any): void {\r\n    let pastedInput: string;\r\n    if (window['clipboardData']) {\r\n      // Browser is IE\r\n      pastedInput = window['clipboardData'].getData('text');\r\n    } else if (event.clipboardData && event.clipboardData.getData) {\r\n      // Other browsers\r\n      pastedInput = event.clipboardData.getData('text/plain');\r\n    }\r\n\r\n    this.pasteData(pastedInput);\r\n    event.preventDefault();\r\n  }\r\n\r\n  @HostListener('drop', ['$event'])\r\n  onDrop(event: DragEvent): void {\r\n    const textData = event.dataTransfer.getData('text');\r\n    this.inputElement.focus();\r\n    this.pasteData(textData);\r\n    event.preventDefault();\r\n  }\r\n\r\n  private pasteData(pastedContent: string): void {\r\n    const sanitizedContent = this.sanitizeInput(pastedContent);\r\n    const pasted = document.execCommand('insertText', false, sanitizedContent);\r\n    if (!pasted) {\r\n      if (this.inputElement.setRangeText) {\r\n        const { selectionStart: start, selectionEnd: end } = this.inputElement;\r\n        this.inputElement.setRangeText(sanitizedContent, start, end, 'end');\r\n      } else {\r\n        // Browser does not support setRangeText, e.g. IE\r\n        this.insertAtCursor(this.inputElement, sanitizedContent);\r\n      }\r\n    }\r\n    if (this.decimal) {\r\n      this.hasDecimalPoint =\r\n        this.inputElement.value.indexOf(this.decimalSeparator) > -1;\r\n    }\r\n  }\r\n\r\n  // The following 2 methods were added from the below article for browsers that do not support setRangeText\r\n  // https://stackoverflow.com/questions/11076975/how-to-insert-text-into-the-textarea-at-the-current-cursor-position\r\n  private insertAtCursor(myField: HTMLInputElement, myValue: string): void {\r\n    const startPos = myField.selectionStart;\r\n    const endPos = myField.selectionEnd;\r\n\r\n    myField.value =\r\n      myField.value.substring(0, startPos) +\r\n      myValue +\r\n      myField.value.substring(endPos, myField.value.length);\r\n\r\n    const pos = startPos + myValue.length;\r\n    myField.focus();\r\n    myField.setSelectionRange(pos, pos);\r\n\r\n    this.triggerEvent(myField, 'input');\r\n  }\r\n\r\n  private triggerEvent(el: HTMLInputElement, type: string): void {\r\n    if ('createEvent' in document) {\r\n      // modern browsers, IE9+\r\n      const e = document.createEvent('HTMLEvents');\r\n      e.initEvent(type, false, true);\r\n      el.dispatchEvent(e);\r\n    }\r\n  }\r\n  // end stack overflow code\r\n\r\n  private sanitizeInput(input: string): string {\r\n    let result = '';\r\n    if (this.decimal && this.isValidDecimal(input)) {\r\n      const regex = new RegExp(`[^0-9${this.decimalSeparator}]`, 'g');\r\n      result = input.replace(regex, '');\r\n    } else {\r\n      result = input.replace(/[^0-9]/g, '');\r\n    }\r\n\r\n    const maxLength = this.inputElement.maxLength;\r\n    if (maxLength > 0) {\r\n      // the input element has maxLength limit\r\n      const allowedLength = maxLength - this.inputElement.value.length;\r\n      result = allowedLength > 0 ? result.substring(0, allowedLength) : '';\r\n    }\r\n    return result;\r\n  }\r\n\r\n  private isValidDecimal(string: string): boolean {\r\n    if (!this.hasDecimalPoint) {\r\n      return string.split(this.decimalSeparator).length <= 2;\r\n    } else {\r\n      // the input element already has a decimal separator\r\n      const selectedText = this.getSelection();\r\n      if (selectedText && selectedText.indexOf(this.decimalSeparator) > -1) {\r\n        return string.split(this.decimalSeparator).length <= 2;\r\n      } else {\r\n        return string.indexOf(this.decimalSeparator) < 0;\r\n      }\r\n    }\r\n  }\r\n\r\n  private getSelection(): string {\r\n    return this.inputElement.value.substring(\r\n      this.inputElement.selectionStart,\r\n      this.inputElement.selectionEnd\r\n    );\r\n  }\r\n\r\n  private forecastValue(key: string): string {\r\n    const selectionStart = this.inputElement.selectionStart;\r\n    const selectionEnd = this.inputElement.selectionEnd;\r\n    const oldValue = this.inputElement.value;\r\n    const selection = oldValue.substring(selectionStart, selectionEnd);\r\n    return selection\r\n      ? oldValue.replace(selection, key)\r\n      : oldValue.substring(0, selectionStart) +\r\n          key +\r\n          oldValue.substring(selectionStart);\r\n  }\r\n}\r\n","import { Directive, ElementRef, HostListener } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[mask]',\r\n})\r\nexport class MaskDirective {\r\n  private navigationKeys = [\r\n    'Backspace',\r\n    'Delete',\r\n    'Tab',\r\n    'Escape',\r\n    'Enter',\r\n    'Home',\r\n    'End',\r\n    'ArrowLeft',\r\n    'ArrowRight',\r\n    'Clear',\r\n    'Copy',\r\n    'Paste',\r\n  ];\r\n  inputElement: HTMLInputElement;\r\n  regex: RegExp;\r\n\r\n  constructor(public el: ElementRef) {\r\n    this.inputElement = el.nativeElement;\r\n    this.regex = new RegExp(this.inputElement.pattern);\r\n  }\r\n\r\n  @HostListener('keydown', ['$event'])\r\n  onKeyDown(e: KeyboardEvent) {\r\n    if (\r\n      this.navigationKeys.indexOf(e.key) > -1 || // Allow: navigation keys: backspace, delete, arrows etc.\r\n      (e.key === 'a' && e.ctrlKey === true) || // Allow: Ctrl+A\r\n      (e.key === 'c' && e.ctrlKey === true) || // Allow: Ctrl+C\r\n      (e.key === 'v' && e.ctrlKey === true) || // Allow: Ctrl+V\r\n      (e.key === 'x' && e.ctrlKey === true) || // Allow: Ctrl+X\r\n      (e.key === 'a' && e.metaKey === true) || // Allow: Cmd+A (Mac)\r\n      (e.key === 'c' && e.metaKey === true) || // Allow: Cmd+C (Mac)\r\n      (e.key === 'v' && e.metaKey === true) || // Allow: Cmd+V (Mac)\r\n      (e.key === 'x' && e.metaKey === true) // Allow: Cmd+X (Mac)\r\n    ) {\r\n      // let it happen, don't do anything\r\n      return;\r\n    }\r\n\r\n    const newValue = this.forecastValue(e.key);\r\n    if (!this.regex.test(newValue)) {\r\n      e.preventDefault();\r\n    }\r\n  }\r\n\r\n  private forecastValue(key: string): string {\r\n    const selectionStart = this.inputElement.selectionStart;\r\n    const selectionEnd = this.inputElement.selectionEnd;\r\n    const oldValue = this.inputElement.value;\r\n    const selection = oldValue.substring(selectionStart, selectionEnd);\r\n    return selection\r\n      ? oldValue.replace(selection, key)\r\n      : oldValue.substring(0, selectionStart) +\r\n          key +\r\n          oldValue.substring(selectionStart);\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { DigitOnlyDirective } from './digit-only.directive';\r\nimport { MaskDirective } from './mask.directive';\r\n\r\n@NgModule({\r\n  imports: [],\r\n  declarations: [DigitOnlyDirective, MaskDirective],\r\n  exports: [DigitOnlyDirective, MaskDirective],\r\n})\r\nexport class DigitOnlyModule {}\r\n","/*\r\n * Public API Surface of digit-only\r\n */\r\n\r\nexport * from './lib/digit-only.directive';\r\nexport * from './lib/mask.directive';\r\nexport * from './lib/digit-only.module';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["Directive","ElementRef","Input","HostListener","NgModule"],"mappings":"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"}